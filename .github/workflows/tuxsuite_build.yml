name: Push build

on:
  pull_request:
    types: [ labeled ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.x"

      - name: Install tuxsuite
        run: |
          python -m pip install --upgrade tuxsuite

      - name: install jq
        run: |
          sudo apt install -y jq

      - name: Make tux plan
        run: |
          cat << EOF > plan.json
          {
            "container": "ubuntu-22.04",
            "artifacts": ["deploy/images"],
            "sources": {
              "kas": {
                "url": "https://github.com/VideologyInc/scailx_yocto.git",
                "yaml": "scailx.yaml",
                "branch": "master"
              }
            }
          }
          EOF

      - name: Run build
        run: |
          mkdir dep_dir
          tuxsuite bake submit -d -o ./dep_dir plan.json --json-out ./out.json
          url=$(cat out.json | jq '.download_url')
          urls=$(python3 ./.github/workflows/download_outputs.py $url /images/scailx-imx8mp/)
          cd dep_dir;
          for f in urls; do wget $f; done
        env:
          TUXSUITE_TOKEN: ${{ secrets.TUXSUITE_TOKEN }}

      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: dep_dir

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Artifacts (outputs)
        uses: actions/download-artifact@v2
        with:
          name: outputs
          path: outputs

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OUTPUTS_NAME=${GITHUB_REPOSITORY##*/}-$GITHUB_REF_NAME-outputs.zip
          cd outputs && zip -r ../$OUTPUTS_NAME *; cd ..
          tree || :
          gh release delete --repo $GITHUB_REPOSITORY $GITHUB_REF_NAME -y || :
          gh release create --generate-notes --repo $GITHUB_REPOSITORY $GITHUB_REF_NAME $OUTPUTS_NAME