# ---------------------------------------------------------------------------
# CI workflows for scailx based on pure kas workflow
# ---------------------------------------------------------------------------
#
# This software is a part of Scailx
# Copyright (C) 2023 Videology Inc
#
# ---------------------------------------------------------------------------
# SPDX-License-Identifier: MIT
# ---------------------------------------------------------------------------

name: kas-manual

on:
  workflow_dispatch:
    inputs:
      release:
        type: choice
        description: 'Release to build'
        options:
          - nanbield
          - scarthgap
      images:
        type: string
        description: 'yocto images to build'
        default: 'scailx-ml scailx-bootstrap-image scailx-builder-container'
      build_sdk:
        type: boolean
        description: 'Build SDK'
        default: true
      package_index:
        type: boolean
        description: 'Build package index'
        default: true

env:
  LANG: "en_US.UTF-8"
  KAS_ALLOW_ROOT: yes
  PACKAGE_FEED_GPG_PASSPHRASE_FILE: /tmp/pkgfeed_password_file
  BB_GENERATE_MIRROR_TARBALLS: 0
  BB_ENV_PASSTHROUGH_ADDITIONS: BB_GENERATE_MIRROR_TARBALLS PACKAGE_FEED_GPG_PASSPHRASE_FILE SCAILX_SOURCES
  SCAILX_SOURCES: yes

jobs:
  kas-manual:
    name: Build kas/ci targets
    runs-on: ubuntu-jammy-16c
    # runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # - name: Free Disk Space
      #   uses: ./.github/workflows/free-disk-space
      - id: scailx_version
        run: |
          SCAILX_VERSION=$(grep 'SCAILX_VERSION' scailx_$${{ inputs.release }}.yaml | cut -d '=' -f2 | xargs)
          echo "OUT=$SCAILX_VERSION" >> $GITHUB_OUTPUT
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.PKGFEED_GPG_PRIVATEKEY }}
          passphrase: ${{ secrets.PKGFEED_GPG_PASSWORD }}
      - run:
          mkdir -p `dirname "$PACKAGE_FEED_GPG_PASSPHRASE_FILE"` && echo "${{ secrets.PKGFEED_GPG_PASSWORD }}" > $PACKAGE_FEED_GPG_PASSPHRASE_FILE
      - name: import ssh key for private repos
        run: |
          eval `ssh-agent -s`
          ssh-add - <<< '${{ secrets.DEPLOY_KEY }}'
          ssh-add - <<< '${{ secrets.DEPLOY_KEY2 }}'
      - name: install gh, locales
        run: |
          sudo mkdir -p -m 755 /etc/apt/keyrings
          wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
          sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update && export DEBIAN_FRONTEND=noninteractive && sudo apt-get -y install locales gh
          sudo locale-gen --purge "en_US.UTF-8"
          sudo update-locale "LANG=en_US.UTF-8"
          sudo dpkg-reconfigure --frontend noninteractive locales
      - name: install yocto dependencies
        run: |
          export DEBIAN_FRONTEND=noninteractive && sudo apt-get -y install locales gawk wget git git-lfs diffstat unzip texinfo gcc build-essential chrpath socat cpio python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint xterm python3-subunit mesa-common-dev zstd liblz4-tool file
          sudo pip3 install --no-input kas
          sudo rm /bin/sh && sudo ln -s bash /bin/sh
      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}
      - id: bbvars
        run: |
          DISTRO_VERSION=$(kas shell -c "bitbake-getvar --value DISTRO_VERSION")
          SCAILX_VERSION=$(kas shell -c "bitbake-getvar --value SCAILX_VERSION")
          DISTRO=$(kas shell -c "bitbake-getvar --value DISTRO")
          echo "DISTRO_VERSION=$DISTRO_VERSION"
          echo "SCAILX_VERSION=$SCAILX_VERSION"
          echo "DISTRO=$DISTRO"
          echo "DISTRO_VERSION=$DISTRO_VERSION" >> $GITHUB_OUTPUT
          echo "SCAILX_VERSION=$SCAILX_VERSION" >> $GITHUB_OUTPUT
          echo "DISTRO=$DISTRO" >> $GITHUB_OUTPUT
      # - name: mount deploy-deb dir
      #   uses: ./.github/workflows/bucket-mount
      #   with:
      #     NAME: deploy
      #     MOUNT_PATH: ${{ github.workspace }}/build/deploy/deb
      #     BUCKET_PATH: scailx-storage:scailx-ppa/${{ steps.bbvars.outputs.DISTRO_VERSION }}/deploy_${{ github.sha }}/deb
      - name: mount cache dir
        uses: ./.github/workflows/bucket-mount
        with:
          NAME: sstate
          MOUNT_PATH: ${{ github.workspace }}/build/sstate-cache
          BUCKET_PATH: scailx-storage:scailx-ppa/${{ steps.bbvars.outputs.DISTRO_VERSION }}/sstate-cache
      - name: copy sstate db
        run: |
          [ -f ${{ github.workspace }}/build/sstate-cache/cache/hashserv.db ] && cp -r ${{ github.workspace }}/build/sstate-cache/cache ${{ github.workspace }}/build/
      - name: build images
        run : |
          kas shell -c "bitbake ${{ inputs.images }}"  "scailx_${{ inputs.release }}.yaml"
          kas build --target scailx-ml                 "scailx_${{ inputs.release }}.yaml"
      - name: build package index
        if: ${{ inputs.package_index }}
        run: |
          kas build --target package-index             "scailx_${{ inputs.release }}.yaml"
      - name: build sdk
        if: ${{ inputs.build_sdk }}
        run: |
          kas build --target scailx-ml -c populate-sdk "scailx_${{ inputs.release }}.yaml"
      - name: restore sstate db
        run: |
          [ -f ${{ github.workspace }}/build/cache/hashserv.db ] && cp -fr ${{ github.workspace }}/build/cache/* ${{ github.workspace }}/build/sstate-cache/cache/
      - name: save images and sdk
        run: |
          rclone copy ${{ github.workspace }}/build/deploy/images scailx-storage:scailx-ppa/${{ steps.bbvars.outputs.DISTRO_VERSION }}/deploy_${{ github.sha }}/images --transfers 64 --checkers 64 &
          rclone copy ${{ github.workspace }}/build/deploy/sdk scailx-storage:scailx-ppa/${{ steps.bbvars.outputs.DISTRO_VERSION }}/deploy_${{ github.sha }}/sdk --transfers 64 --checkers 64 &
          rclone copy ${{ github.workspace }}/build/deploy/deb scailx-storage:scailx-ppa/${{ steps.bbvars.outputs.DISTRO_VERSION }}/deploy_${{ github.sha }}/deb --transfers 64 --checkers 64 &
          wait
      - name: tag release
        run: |
          touch build_${{ github.sha }}.txt
          echo "SCAILX_VERSION=${{ steps.bbvars.outputs.SCAILX_VERSION }}" >> build_${{ github.sha }}.txt
          echo "DISTRO_VERSION=${{ steps.bbvars.outputs.DISTRO_VERSION }}" >> build_${{ github.sha }}.txt
          echo "BUILD_DATE=$(date)" >> build_${{ github.sha }}.txt
          echo "TARGET_IMAGE=scailx-ml" >> build_${{ github.sha }}.txt
          echo "DISTRO=${{ steps.bbvars.outputs.DISTRO }}" >> build_${{ github.sha }}.txt
          echo "RELEASE=${{ inputs.release }}" >> build_${{ github.sha }}.txt
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ github.sha }}
          path: build_${{ github.sha }}.txt

  transfer-deploy:
    name: Transfer deploy artifacts
    runs-on: ubuntu-latest
    needs: kas-manual
    environment: deploy_env
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}
      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build_${{ github.sha }}
      - name: transfer deploy
        run: |
          source build_${{ github.sha }}.txt
          rclone copyto scailx-storage:scailx-ppa/$DISTRO_VERSION/deploy_${{ github.sha }} scailx-storage:scailx-ppa/$DISTRO_VERSION/deploy --transfers 64 -M --no-update-dir-modtime --no-update-modtime --multi-thread-streams 64 --inplace --fast-list
